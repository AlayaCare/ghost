import{_ as a,c as t,o as i,ae as o}from"./chunks/framework.C0FZg82U.js";const h=JSON.parse('{"title":"Security","description":"","frontmatter":{},"headers":[],"relativePath":"security.md","filePath":"security.md"}'),n={name:"security.md"};function s(l,e,c,r,p,d){return i(),t("div",null,e[0]||(e[0]=[o(`<h1 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to &quot;Security&quot;">​</a></h1><h2 id="security-hardening" tabindex="-1">Security hardening <a class="header-anchor" href="#security-hardening" aria-label="Permalink to &quot;Security hardening&quot;">​</a></h2><p>If you want to narrow down what Goliac is doing, you can create 2 github apps</p><ul><li>one to access only the team&#39;s repository</li><li>another one that dont have repository access, but only to the organization administrative APIs</li></ul><h3 id="teams-github-app" tabindex="-1">Teams GitHub App <a class="header-anchor" href="#teams-github-app" aria-label="Permalink to &quot;Teams GitHub App&quot;">​</a></h3><p>You need to</p><ul><li>Register new teams GitHub App <ul><li>in your profile settings, go to <code>Developer settings</code>/<code>GitHub Apps</code></li><li>Click on <code>New GitHub App</code></li></ul></li><li>Give basic information: <ul><li>GitHub App name can be <code>&lt;yourorg&gt;-goliac-app-teams</code></li><li>Homepage URL can be <code>https://github.com/Alayacare/goliac</code></li><li>Disable the active Webhook</li></ul></li><li>Under Repository permissions <ul><li>Give Read/Write access to <code>Administration</code> (needed to bypass the &#39;vaidate&#39; check)</li><li>Give Read/Write access to <code>Content</code> (needed to be able to udpate the repository)</li></ul></li><li>Where can this GitHub App be installed: <code>Only on this account</code></li><li>And Create</li><li>then you must <ul><li>collect the AppID</li><li>Generate (and collect) a private key (file)</li></ul></li><li>Go to the left tab &quot;Install App&quot; <ul><li>Click on &quot;Install&quot;</li><li>On Repository access, select &quot;Only select repositories&quot;, and select the team&#39;s repository</li></ul></li></ul><p>We will set ip up in Goliac with</p><ul><li><code>GOLIAC_GITHUB_TEAM_APP_ID</code> environment variable</li><li><code>GOLIAC_GITHUB_TEAM_APP_PRIVATE_KEY_FILE</code> environment variable</li></ul><h3 id="admin-github-app" tabindex="-1">Admin GitHub App <a class="header-anchor" href="#admin-github-app" aria-label="Permalink to &quot;Admin GitHub App&quot;">​</a></h3><p>If you already created a Github app (when following the installation instructions), you can use it, but remove the repository access</p><p>Else you need to</p><ul><li>Register new GitHub App <ul><li>in your profile settings, go to <code>Developer settings</code>/<code>GitHub Apps</code></li><li>Click on <code>New GitHub App</code></li></ul></li><li>Give basic information: <ul><li>GitHub App name can be <code>&lt;yourorg&gt;-goliac-app</code> (it will be used in the rulesets later)</li><li>Homepage URL can be <code>https://github.com/Alayacare/goliac</code></li><li>Disable the active Webhook</li></ul></li><li>Under Repository permissions <ul><li>Give Read/Write access to <code>Administration</code></li></ul></li><li>Under Organization permissions <ul><li>Give Read/Write access to <code>Administration</code></li><li>Give Read/Write access to <code>Members</code></li></ul></li><li>Where can this GitHub App be installed: <code>Only on this account</code></li><li>And Create</li><li>then you must <ul><li>collect the AppID</li><li>Generate (and collect) a private key (file)</li></ul></li><li>Go to the left tab &quot;Install App&quot; <ul><li>Click on &quot;Install&quot;</li><li>On Repository access, select &quot;All repositories&quot; (except if you are doing a test and want to select the repositories to manage)</li></ul></li></ul><p>We will set ip up in Goliac with</p><ul><li><code>GOLIAC_GITHUB_APP_ID</code> environment variable</li><li><code>GOLIAC_GITHUB_APP_PRIVATE_KEY_FILE</code> environment variable</li></ul><h2 id="networking" tabindex="-1">Networking <a class="header-anchor" href="#networking" aria-label="Permalink to &quot;Networking&quot;">​</a></h2><h3 id="outbond-connections" tabindex="-1">Outbond connections <a class="header-anchor" href="#outbond-connections" aria-label="Permalink to &quot;Outbond connections&quot;">​</a></h3><ul><li>By default Goliac use Github APIs (cf <code>GOLIAC_GITHUB_SERVER</code> environment variable). If you are using the default Github Cloud (i.e <code>https://github.com</code>) and want to firewall the IPs used by Goliac, check <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/about-githubs-ip-addresses" target="_blank" rel="noreferrer">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/about-githubs-ip-addresses</a> for the list of API IPs adresses</li><li>if you enable Slack notification (see <a href="./installation.html#optional-slack-integration">Optional: Slack integration&quot;</a>, it will also try to connect to Slack API IPs )</li></ul><h3 id="inbound-connections" tabindex="-1">Inbound connections <a class="header-anchor" href="#inbound-connections" aria-label="Permalink to &quot;Inbound connections&quot;">​</a></h3><ul><li>Goliac has a public REST API (used by the UI) on the port <code>18000</code> by default ( <code>GOLIAC_SERVER_PORT</code> environment variable) and on the <code>localhost</code> port by default (<code>GOLIAC_SERVER_HOST</code> environement variable).</li><li>it has also a second host/port, <code>GOLIAC_GITHUB_WEBHOOK_HOST</code> (<code>localhost</code> default value) and <code>GOLIAC_GITHUB_WEBHOOK_PORT</code> (<code>18001</code> default value) if you want to receive webhook events.</li><li>so by default nothing is exposed externally. Except if you are using the Docker image where <code>GOLIAC_SERVER_HOST</code> is set to <code>0.0.0.0</code> by default.</li></ul><p>If you decide to configure Github webhook events (see <a href="./installation.html#optional-gitHub-webhook">Optional: GitHub webhook&quot;</a> ), it is recommended to setup webhook listener, by setting correctly</p><ul><li>the <code>GOLIAC_GITHUB_WEBHOOK_HOST</code> (you need to change the <code>localhost</code> default value)</li><li>the <code>GOLIAC_GITHUB_WEBHOOK_PORT</code> (<code>18001</code> by default)</li><li>the <code>GOLIAC_GITHUB_WEBHOOK_PATH</code> (<code>/webhook</code> by default)</li><li>and the <code>GOLIAC_GITHUB_WEBHOOK_SECRET</code> (empty by default)</li></ul><h3 id="restricting-goliac-ui-and-rest-api" tabindex="-1">Restricting Goliac UI and REST API <a class="header-anchor" href="#restricting-goliac-ui-and-rest-api" aria-label="Permalink to &quot;Restricting Goliac UI and REST API&quot;">​</a></h3><p>By default the UI (and the REST API) are listening on <code>localhost</code> host except in the docker image where it is exposed to <code>0.0.0.0</code>. Of course you can change that by setting the <code>GOLIAC_SERVER_HOST</code> environment variable.</p><p>If you want to open the UI (and the REST APIs) but in a limited way, you will need to use a side-car (in kubernetes) or something similar, to setup a basic authentication, or a better mechanism.</p><p>For example a basic authentication using Apache, can be configured like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;IfModule mod_ssl.c&gt;</span></span>
<span class="line"><span>&lt;VirtualHost *:443&gt;</span></span>
<span class="line"><span>	ServerName goliac.mydomain.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;Location /&gt; #the / has to be there, otherwise Apache startup fails</span></span>
<span class="line"><span>            #Deny from all</span></span>
<span class="line"><span>            #Allow from (You may set IP here / to access without password)</span></span>
<span class="line"><span>            AuthUserFile /etc/apache2/htpasswd/goliac</span></span>
<span class="line"><span>            AuthName authorization</span></span>
<span class="line"><span>            AuthType Basic</span></span>
<span class="line"><span>            #Satisfy Any # (or all, if IPs specified and require IP + pass)</span></span>
<span class="line"><span>            #            # any means neither ip nor pass</span></span>
<span class="line"><span>            require valid-user</span></span>
<span class="line"><span>        &lt;/Location&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	ProxyRequests Off</span></span>
<span class="line"><span>	&lt;Proxy *&gt;</span></span>
<span class="line"><span>	Order deny,allow</span></span>
<span class="line"><span>	Allow from all</span></span>
<span class="line"><span>	&lt;/Proxy&gt;</span></span>
<span class="line"><span>	ProxyPass / http://localhost:8080/</span></span>
<span class="line"><span>	ProxyPassReverse / http://localhost:8080/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  RewriteEngine on</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span>&lt;/VirtualHost&gt;</span></span>
<span class="line"><span>&lt;/IfModule&gt;</span></span></code></pre></div><h2 id="logs-and-pii" tabindex="-1">Logs and PII <a class="header-anchor" href="#logs-and-pii" aria-label="Permalink to &quot;Logs and PII&quot;">​</a></h2><p>By default Goliac will logs</p><ul><li>in text format (you can change it via <code>GOLIAC_LOGRUS_FORMAT</code> to <code>json</code>)</li><li>as info (you can change it via <code>GOLIAC_LOGRUS_LEVEL</code> to <code>warn</code> or <code>error</code>)</li></ul><p>Intentionally, with the (default) info level, Goliac will output command it is running, with some PII informations (name of the author of the change, some information on the changes. you can check the <code>internal/engine/goliac_reconciliator.go</code> for more details, especially all <code>logrus.WithFields</code> code). It is the intented behaviour to be able to collect what Goliac is doing.</p><p>It will output something like</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>time=&quot;2024-11-10T04:03:14-05:00&quot; level=info msg=&quot;teamslug: a_github_team, username: a_username_githubid, role: member&quot; author=author_of_the_commit command=update_team_add_member dryrun=false</span></span></code></pre></div><p>If you want to restrict this behaviour, you can change the log level (to <code>warn</code> or <code>error</code>), and you can still keep the audit feature of Goliac, by reviewing the Git history of your teams repository (in Github)</p>`,34)]))}const b=a(n,[["render",s]]);export{h as __pageData,b as default};
