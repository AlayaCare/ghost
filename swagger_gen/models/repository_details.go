// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryDetails repository details
//
// swagger:model repositoryDetails
type RepositoryDetails struct {

	// archived
	Archived bool `json:"archived"`

	// name
	Name string `json:"name,omitempty"`

	// public
	Public bool `json:"public"`

	// readers
	Readers []*RepositoryDetailsReadersItems0 `json:"readers"`

	// writers
	Writers []*RepositoryDetailsWritersItems0 `json:"writers"`
}

// Validate validates this repository details
func (m *RepositoryDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryDetails) validateReaders(formats strfmt.Registry) error {
	if swag.IsZero(m.Readers) { // not required
		return nil
	}

	for i := 0; i < len(m.Readers); i++ {
		if swag.IsZero(m.Readers[i]) { // not required
			continue
		}

		if m.Readers[i] != nil {
			if err := m.Readers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryDetails) validateWriters(formats strfmt.Registry) error {
	if swag.IsZero(m.Writers) { // not required
		return nil
	}

	for i := 0; i < len(m.Writers); i++ {
		if swag.IsZero(m.Writers[i]) { // not required
			continue
		}

		if m.Writers[i] != nil {
			if err := m.Writers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this repository details based on the context it is used
func (m *RepositoryDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWriters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryDetails) contextValidateReaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Readers); i++ {

		if m.Readers[i] != nil {

			if swag.IsZero(m.Readers[i]) { // not required
				return nil
			}

			if err := m.Readers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryDetails) contextValidateWriters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Writers); i++ {

		if m.Writers[i] != nil {

			if swag.IsZero(m.Writers[i]) { // not required
				return nil
			}

			if err := m.Writers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("writers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("writers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryDetails) UnmarshalBinary(b []byte) error {
	var res RepositoryDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryDetailsReadersItems0 repository details readers items0
//
// swagger:model RepositoryDetailsReadersItems0
type RepositoryDetailsReadersItems0 struct {

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`
}

// Validate validates this repository details readers items0
func (m *RepositoryDetailsReadersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryDetailsReadersItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this repository details readers items0 based on context it is used
func (m *RepositoryDetailsReadersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryDetailsReadersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryDetailsReadersItems0) UnmarshalBinary(b []byte) error {
	var res RepositoryDetailsReadersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RepositoryDetailsWritersItems0 repository details writers items0
//
// swagger:model RepositoryDetailsWritersItems0
type RepositoryDetailsWritersItems0 struct {

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`
}

// Validate validates this repository details writers items0
func (m *RepositoryDetailsWritersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryDetailsWritersItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this repository details writers items0 based on context it is used
func (m *RepositoryDetailsWritersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryDetailsWritersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryDetailsWritersItems0) UnmarshalBinary(b []byte) error {
	var res RepositoryDetailsWritersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
