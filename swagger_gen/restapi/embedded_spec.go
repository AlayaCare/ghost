// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "goliac is a golang REST application skeleton The base path for all the APIs is \"/api/v1\".\n",
    "title": "goliac",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/flushcache": {
      "post": {
        "description": "Flush the Github remote cache",
        "tags": [
          "app"
        ],
        "operationId": "postFlushCache",
        "responses": {
          "200": {
            "description": "cache flushed"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/liveness": {
      "get": {
        "description": "Check if Goliac is healthy",
        "tags": [
          "health"
        ],
        "operationId": "getLiveness",
        "responses": {
          "200": {
            "description": "status of health check",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/readiness": {
      "get": {
        "description": "Check if Goliac is ready to serve",
        "tags": [
          "health"
        ],
        "operationId": "getReadiness",
        "responses": {
          "200": {
            "description": "status of health check",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/resync": {
      "post": {
        "description": "Ask to sync again against Github",
        "tags": [
          "app"
        ],
        "operationId": "postResync",
        "responses": {
          "200": {
            "description": "resync in progress"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Get different statistics on Goliac",
        "tags": [
          "app"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "get Goliac statistics",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get all users",
        "tags": [
          "app"
        ],
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "get list of users (organization or external)",
            "schema": {
              "$ref": "#/definitions/users"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "description": "Get user and associated teams and repos",
        "tags": [
          "app"
        ],
        "operationId": "getUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "user name",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get user details especially teams and repositories",
            "schema": {
              "$ref": "#/definitions/userDetails"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "health": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "repository": {
      "type": "object",
      "properties": {
        "archived": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-isnullable": false
        },
        "public": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "lastSyncError": {
          "type": "string"
        },
        "lastSyncTime": {
          "type": "string",
          "minLength": 1
        },
        "nbRepos": {
          "type": "integer",
          "x-omitempty": false
        },
        "nbTeams": {
          "type": "integer",
          "x-omitempty": false
        },
        "nbUsers": {
          "type": "integer",
          "x-omitempty": false
        },
        "nbUsersExternal": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "team": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "name": {
          "type": "string",
          "x-isnullable": false
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "external": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        },
        "githubid": {
          "type": "string",
          "x-isnullable": false
        },
        "name": {
          "type": "string",
          "x-isnullable": false
        }
      }
    },
    "userDetails": {
      "type": "object",
      "properties": {
        "external": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        },
        "githubid": {
          "type": "string",
          "x-isnullable": false
        },
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/repository"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/team"
          }
        }
      }
    },
    "users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/user"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "Check if goliac is healthy",
      "name": "health"
    }
  ],
  "x-tagGroups": [
    {
      "name": "goliac Management",
      "tags": [
        "app"
      ]
    },
    {
      "name": "Health Check",
      "tags": [
        "health"
      ]
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "goliac is a golang REST application skeleton The base path for all the APIs is \"/api/v1\".\n",
    "title": "goliac",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/flushcache": {
      "post": {
        "description": "Flush the Github remote cache",
        "tags": [
          "app"
        ],
        "operationId": "postFlushCache",
        "responses": {
          "200": {
            "description": "cache flushed"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/liveness": {
      "get": {
        "description": "Check if Goliac is healthy",
        "tags": [
          "health"
        ],
        "operationId": "getLiveness",
        "responses": {
          "200": {
            "description": "status of health check",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/readiness": {
      "get": {
        "description": "Check if Goliac is ready to serve",
        "tags": [
          "health"
        ],
        "operationId": "getReadiness",
        "responses": {
          "200": {
            "description": "status of health check",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/resync": {
      "post": {
        "description": "Ask to sync again against Github",
        "tags": [
          "app"
        ],
        "operationId": "postResync",
        "responses": {
          "200": {
            "description": "resync in progress"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "Get different statistics on Goliac",
        "tags": [
          "app"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "get Goliac statistics",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get all users",
        "tags": [
          "app"
        ],
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "get list of users (organization or external)",
            "schema": {
              "$ref": "#/definitions/users"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "description": "Get user and associated teams and repos",
        "tags": [
          "app"
        ],
        "operationId": "getUser",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "user name",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get user details especially teams and repositories",
            "schema": {
              "$ref": "#/definitions/userDetails"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "health": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "repository": {
      "type": "object",
      "properties": {
        "archived": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        },
        "name": {
          "type": "string",
          "x-isnullable": false
        },
        "public": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "lastSyncError": {
          "type": "string"
        },
        "lastSyncTime": {
          "type": "string",
          "minLength": 1
        },
        "nbRepos": {
          "type": "integer",
          "x-omitempty": false
        },
        "nbTeams": {
          "type": "integer",
          "x-omitempty": false
        },
        "nbUsers": {
          "type": "integer",
          "x-omitempty": false
        },
        "nbUsersExternal": {
          "type": "integer",
          "x-omitempty": false
        }
      }
    },
    "team": {
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "name": {
          "type": "string",
          "x-isnullable": false
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          }
        }
      }
    },
    "user": {
      "type": "object",
      "properties": {
        "external": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        },
        "githubid": {
          "type": "string",
          "x-isnullable": false
        },
        "name": {
          "type": "string",
          "x-isnullable": false
        }
      }
    },
    "userDetails": {
      "type": "object",
      "properties": {
        "external": {
          "type": "boolean",
          "x-isnullable": false,
          "x-omitempty": false
        },
        "githubid": {
          "type": "string",
          "x-isnullable": false
        },
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/repository"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/team"
          }
        }
      }
    },
    "users": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/user"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "Check if goliac is healthy",
      "name": "health"
    }
  ],
  "x-tagGroups": [
    {
      "name": "goliac Management",
      "tags": [
        "app"
      ]
    },
    {
      "name": "Health Check",
      "tags": [
        "health"
      ]
    }
  ]
}`))
}
