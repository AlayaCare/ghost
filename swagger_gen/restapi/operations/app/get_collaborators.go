// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCollaboratorsHandlerFunc turns a function with the right signature into a get collaborators handler
type GetCollaboratorsHandlerFunc func(GetCollaboratorsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCollaboratorsHandlerFunc) Handle(params GetCollaboratorsParams) middleware.Responder {
	return fn(params)
}

// GetCollaboratorsHandler interface for that can handle valid get collaborators params
type GetCollaboratorsHandler interface {
	Handle(GetCollaboratorsParams) middleware.Responder
}

// NewGetCollaborators creates a new http.Handler for the get collaborators operation
func NewGetCollaborators(ctx *middleware.Context, handler GetCollaboratorsHandler) *GetCollaborators {
	return &GetCollaborators{Context: ctx, Handler: handler}
}

/*
	GetCollaborators swagger:route GET /collaborators app getCollaborators

Get all external collaborators
*/
type GetCollaborators struct {
	Context *middleware.Context
	Handler GetCollaboratorsHandler
}

func (o *GetCollaborators) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCollaboratorsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
