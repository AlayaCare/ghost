// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetCollaboratorParams creates a new GetCollaboratorParams object
//
// There are no default values defined in the spec.
func NewGetCollaboratorParams() GetCollaboratorParams {

	return GetCollaboratorParams{}
}

// GetCollaboratorParams contains all the bound params for the get collaborator operation
// typically these are obtained from a http.Request
//
// swagger:parameters getCollaborator
type GetCollaboratorParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*collaborator name
	  Required: true
	  Min Length: 1
	  In: path
	*/
	CollaboratorID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCollaboratorParams() beforehand.
func (o *GetCollaboratorParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rCollaboratorID, rhkCollaboratorID, _ := route.Params.GetOK("collaboratorID")
	if err := o.bindCollaboratorID(rCollaboratorID, rhkCollaboratorID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCollaboratorID binds and validates parameter CollaboratorID from path.
func (o *GetCollaboratorParams) bindCollaboratorID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.CollaboratorID = raw

	if err := o.validateCollaboratorID(formats); err != nil {
		return err
	}

	return nil
}

// validateCollaboratorID carries on validations for parameter CollaboratorID
func (o *GetCollaboratorParams) validateCollaboratorID(formats strfmt.Registry) error {

	if err := validate.MinLength("collaboratorID", "path", o.CollaboratorID, 1); err != nil {
		return err
	}

	return nil
}
