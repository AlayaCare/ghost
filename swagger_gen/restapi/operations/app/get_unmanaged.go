// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUnmanagedHandlerFunc turns a function with the right signature into a get unmanaged handler
type GetUnmanagedHandlerFunc func(GetUnmanagedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUnmanagedHandlerFunc) Handle(params GetUnmanagedParams) middleware.Responder {
	return fn(params)
}

// GetUnmanagedHandler interface for that can handle valid get unmanaged params
type GetUnmanagedHandler interface {
	Handle(GetUnmanagedParams) middleware.Responder
}

// NewGetUnmanaged creates a new http.Handler for the get unmanaged operation
func NewGetUnmanaged(ctx *middleware.Context, handler GetUnmanagedHandler) *GetUnmanaged {
	return &GetUnmanaged{Context: ctx, Handler: handler}
}

/*
	GetUnmanaged swagger:route GET /unmanaged app getUnmanaged

Get unmanaged resources metrics
*/
type GetUnmanaged struct {
	Context *middleware.Context
	Handler GetUnmanagedHandler
}

func (o *GetUnmanaged) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUnmanagedParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
