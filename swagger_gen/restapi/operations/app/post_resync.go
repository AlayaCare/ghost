// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostResyncHandlerFunc turns a function with the right signature into a post resync handler
type PostResyncHandlerFunc func(PostResyncParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostResyncHandlerFunc) Handle(params PostResyncParams) middleware.Responder {
	return fn(params)
}

// PostResyncHandler interface for that can handle valid post resync params
type PostResyncHandler interface {
	Handle(PostResyncParams) middleware.Responder
}

// NewPostResync creates a new http.Handler for the post resync operation
func NewPostResync(ctx *middleware.Context, handler PostResyncHandler) *PostResync {
	return &PostResync{Context: ctx, Handler: handler}
}

/*
	PostResync swagger:route POST /resync app postResync

Ask to sync again against Github
*/
type PostResync struct {
	Context *middleware.Context
	Handler PostResyncHandler
}

func (o *PostResync) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostResyncParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
