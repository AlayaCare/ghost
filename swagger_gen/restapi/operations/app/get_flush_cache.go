// Code generated by go-swagger; DO NOT EDIT.

package app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetFlushCacheHandlerFunc turns a function with the right signature into a get flush cache handler
type GetFlushCacheHandlerFunc func(GetFlushCacheParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFlushCacheHandlerFunc) Handle(params GetFlushCacheParams) middleware.Responder {
	return fn(params)
}

// GetFlushCacheHandler interface for that can handle valid get flush cache params
type GetFlushCacheHandler interface {
	Handle(GetFlushCacheParams) middleware.Responder
}

// NewGetFlushCache creates a new http.Handler for the get flush cache operation
func NewGetFlushCache(ctx *middleware.Context, handler GetFlushCacheHandler) *GetFlushCache {
	return &GetFlushCache{Context: ctx, Handler: handler}
}

/*
	GetFlushCache swagger:route GET /flushcache app getFlushCache

Flush the Github remote cache
*/
type GetFlushCache struct {
	Context *middleware.Context
	Handler GetFlushCacheHandler
}

func (o *GetFlushCache) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetFlushCacheParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
